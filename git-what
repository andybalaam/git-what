#!/bin/bash

# git what Copyright (C) 2017 Andy Balaam, released under GPLv2 or later.

set -e
set -u

if git rev-parse --verify develop > /dev/null 2>&1; then
{
    MAINBRANCH=develop
}
elif git rev-parse --verify main > /dev/null 2>&1; then
{
    MAINBRANCH=main
}
else
{
    MAINBRANCH=master
}; fi

declare -A COMMITS

function current-branch()
{
    git rev-parse --abbrev-ref HEAD
}

function branches()
{
    git for-each-ref refs/heads --format="%(refname:short)"
}

function print-branch-name()
{
    B="${1}"
    CURRENT="${2}"

    if [ "${B}" == "${CURRENT}" ]; then
    {
        echo -en '* \033[32m'
    }
    else
    {
        echo -en '  \033[34m'
    }; fi

    echo -e "${B}"'\033[0m'
}

function print-commits()
{
    B="${1}"

    git log --abbrev-commit --pretty=oneline "${MAINBRANCH}..${B}" | while read COMMIT LINE; do
        set +u
        EXISTING_BRANCH="${COMMITS[${COMMIT}]}"
        set -u
        if [[ -n "${EXISTING_BRANCH}" && "${EXISTING_BRANCH}" != "${B}" ]]; then
            echo "  -> ${EXISTING_BRANCH}"
            break
        else
            echo "${COMMIT} ${LINE}"
        fi
    done
}

function capture-commits()
{
    B="${1}"

    COMMIT=$(git log --abbrev-commit --pretty="format:%h" "${MAINBRANCH}..${B}" | head -n 1)

    if  [ -n "${COMMIT}" ]; then
        COMMITS[${COMMIT}]="${B}"
    fi
}

function leftpad()
{
    sed 's/^/    /'
}

function print-changes()
{
    CURRENT="${1}"
    STATUS="${2}"

    echo -e '-- Changes on \033[32m'"${CURRENT}"'\033[0m --'

    SHORT_STATUS=$(head -n 5 <<<"${STATUS}")

    git -c color.status=always status --short | head -n 5
    if [ "${SHORT_STATUS}" != "${STATUS}" ]; then
    {
        echo -en '\033[31m... '
        echo -n $(git status --porcelain | tail -n +6 | wc -l)
        echo -e ' more ...\033[0m'
    }; fi
}

function print-status()
{
    CURRENT="${1}"
    STATUS=$(git status --short)

    if [ "$(git status --porcelain | wc -l)" == "0" ]; then
    {
        echo "No changes."
    }
    else
    {
        print-changes "${CURRENT}" "${STATUS}"
    }; fi
}

CURRENT=$(current-branch)

for B in $(branches); do
{
    capture-commits "${B}"
}; done

for K in "${!COMMITS[@]}"; do echo $K ${COMMITS[$K]}; done

for B in $(branches); do
{
    print-branch-name "${B}" "${CURRENT}"
    print-commits "${B}" | leftpad
    echo
}; done

print-status "${CURRENT}"

